#!/usr/bin/stap
#
@define store_lat(start, idx, where) %(
    # ignore clearly negative latencies. Not sure why they are happening
    if ((gettimeofday_us() - @start[tid(), @idx]) < (3600 * 1000 * 1000)) {
        @where <<< gettimeofday_us() - @start[tid(), @idx];
    }
    delete @start[tid(), @idx]
%)

@define start_lat(start, idx) %(
    @start[tid(), idx] = gettimeofday_us()
%)

# reactor tasks
global rt_start_time
global reactor_task 
probe process(@1).mark("reactor_run_tasks_start") {
    @start_lat(rt_start_time, 0)
}

probe process(@1).mark("reactor_run_tasks_end") {
    @store_lat(rt_start_time, 0, reactor_task)
}

# thread tasks
global thr_start_time
global thread_run
probe process(@1).mark("thread_run_start") {
    @start_lat(thr_start_time, $arg1)
}

probe process(@1).mark("thread_run_end") {
    @store_lat(thr_start_time, $arg1, thread_run)
}

# mutate
global sp_mut_start_time
global sp_mutate 
probe process(@1).mark("storage_proxy_mutate_start") {
    @start_lat(sp_mut_start_time, $arg1)
}

probe process(@1).mark("storage_proxy_mutate_end") {
    @store_lat(sp_mut_start_time, $arg1, sp_mutate)
}

# query
global sp_query_start_time
global sp_query
probe process(@1).mark("storage_proxy_query_start") {
    @start_lart(sp_query_start_time, $arg1)
}

probe process(@1).mark("storage_proxy_query_end") {
    @store_lat(sp_query_start_time, $arg1, sp_query)
}

# cache evict
global cache_evict_start_time
global cache_evict
probe process(@1).mark("cache_evict_start") {
    @start_lat(cache_evict_start_time, 0)
}

probe process(@1).mark("cache_evict_end") {
    @store_lat(cache_evict_start_time, 0, cache_evict);
}

# cache update
global cache_update_start_time
global cache_update
probe process(@1).mark("cache_update_start") {
    @start_lat(cache_update_start_time, 0)
}

probe process(@1).mark("cache_update_end") {
    @store_lat(cache_update_start_time, 0, cache_update);
}

# sstable read
global sstable_read_start_time
global sstable_read
probe process(@1).mark("sstable_read_start") {
    @start_lat(sstable_read_start_time, $arg1)
}

probe process(@1).mark("sstable_read_end") {
    @store_lat(sstable_read_start_time, $arg1, sstable_read);
}

# sstable one read
global sstable_read_one_start_time
global sstable_read_one
probe process(@1).mark("sstable_read_one_start") {
    @start_lat(sstable_read_one_start_time, $arg1)
}

probe process(@1).mark("sstable_read_one_end") {
    @store_lat(sstable_read_one_start_time, $arg1, sstable_read_one);
}

# sstable find_row 
global find_ranges_start_time
global find_ranges
probe process(@1).mark("find_ranges_start") {
    @start_lat(find_ranges_start_time, $arg1)
}

probe process(@1).mark("find_ranges_end") {
    @store_lat(find_ranges_start_time, $arg1, find_ranges);
}

# sstable create_from_range
global create_from_range_start_time
global create_from_range
probe process(@1).mark("create_from_range_start") {
    @start_lat(create_from_range_start_time, $arg1)
}

probe process(@1).mark("create_from_range_end") {
    @store_lat(create_from_range_start_time, $arg1, create_from_range);
}

# sstable mmerger_read_next
global mmerger_read_next_start_time
global mmerger_read_next
probe process(@1).mark("mmerger_read_next_start") {
    @start_lat(mmerger_read_next_start_time, $arg1)
}

probe process(@1).mark("mmerger_read_next_end") {
    @store_lat(mmerger_read_next_start_time, $arg1, mmerger_read_next);
}

# sstable mmerger_do_fill_buffer
global mmerger_do_fill_buffer_start_time
global mmerger_do_fill_buffer
probe process(@1).mark("mmerger_do_fill_buffer_start") {
    @start_lat(mmerger_do_fill_buffer_start_time, $arg1)
}

probe process(@1).mark("mmerger_do_fill_buffer_end") {
    @store_lat(mmerger_do_fill_buffer_start_time, $arg1, mmerger_do_fill_buffer);
}

probe begin {
    println("Probing some important latencies");
}

@define show_hist(msg, hist) %(
    println(@msg)
    if (@count(@hist)) {
	print(@hist_log(@hist));
    } else {
        println("No events");
    }
%)

probe end {
    println();
    @show_hist("Seastar reactor", reactor_task);
    @show_hist("Seastar threads", thread_run);
    @show_hist("mutate", sp_mutate);
    @show_hist("query", sp_query);
    @show_hist("cache_evict", cache_evict);
    @show_hist("cache_update", cache_update);
    @show_hist("sstable_read", sstable_read);
    @show_hist("sstable_read_one", sstable_read_one);
    @show_hist("find_ranges", find_ranges);
    @show_hist("create_from_range", create_from_range);
    @show_hist("mmerger_read_next", mmerger_read_next);
    @show_hist("mmerger_do_fill_buffer", mmerger_do_fill_buffer);
}
